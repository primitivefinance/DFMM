// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.13;

import { Pool } from "src/interfaces/IDFMM.sol";

/**
 * @title Strategy Interface.
 * @author Primitive
 * @notice All the strategy contracts must implement this interface.
 */
interface IStrategy {
    // Errors

    /// @dev Thrown when the update code is invalid.
    error InvalidUpdateCode();

    /// @dev Thrown when the sender is not the DFMM contract.
    error NotDFMM();

    /// @dev Thrown when the sender is authorized.
    error InvalidSender();

    /// @dev Thrown when an expected delta does not match the actual delta.
    error DeltaError(uint256 expected, uint256 actual);

    /// @dev Thrown when the reserves length is not 2.
    error InvalidReservesLength();

    // Setters

    /**
     * @notice Intializes a new pool.
     * @param sender Address that called the DFMM contract.
     * @param poolId Id of the pool to initialize.
     * @param data Pool parameters encoded as bytes.
     * @return valid True if the initialization is valid.
     * @return invariant Initial invariant of the pool.
     * @return reserves Initial reserves of the pool in WAD.
     * @return totalLiquidity Initial liquidity of the pool.
     */
    function init(
        address sender,
        uint256 poolId,
        Pool calldata pool,
        bytes calldata data
    )
        external
        returns (
            bool valid,
            int256 invariant,
            uint256[] memory reserves,
            uint256 totalLiquidity
        );

    // Getters

    /**
     * @notice Returns the name of the strategy.
     */
    function name() external view returns (string memory);

    /**
     * @notice Validates an allocation of liquidity.
     * @param sender Address that called the DFMM contract.
     * @param poolId Id of the pool to allocate liquidity to.
     * @param pool Structure containing the pool.
     * @param data Additional data for the strategy.
     * @return valid True if the allocation is valid.
     * @return invariant Invariant of the pool after the allocation.
     * @return deltas Amount of tokens to allocate (expressed in WAD).
     * @return deltaLiquidity Amount of liquidity to allocate.
     */
    function validateAllocate(
        address sender,
        uint256 poolId,
        Pool calldata pool,
        bytes calldata data
    )
        external
        view
        returns (
            bool valid,
            int256 invariant,
            uint256[] memory deltas,
            uint256 deltaLiquidity
        );

    /**
     * @notice Validates a deallocation of liquidity.
     * @param sender Address that called the DFMM contract.
     * @param poolId Id of the pool to deallocate liquidity from.
     * @param pool Structure containing the pool.
     * @param data Additional data for the strategy.
     * @return valid True if the deallocation is valid.
     * @return invariant Invariant of the pool after the deallocation.
     * @return deltas Amount of tokens to deallocate (expressed in WAD).
     * @return deltaLiquidity Amount of liquidity to deallocate.
     */
    function validateDeallocate(
        address sender,
        uint256 poolId,
        Pool calldata pool,
        bytes calldata data
    )
        external
        view
        returns (
            bool valid,
            int256 invariant,
            uint256[] memory deltas,
            uint256 deltaLiquidity
        );

    /**
     * @notice Validates a swap of tokens.
     * @param sender Address that called the DFMM contract.
     * @param poolId Id of the pool to swap tokens in.
     * @param pool Structure containing the pool.
     * @param data Additional data for the strategy.
     * @return valid True if the swap is valid.
     * @return invariant Invariant of the pool after the swap.
     * @return tokenInIndex Index of the token being sent.
     * @return tokenOutIndex Index of the token being received.
     * @return amountIn Amount of token sent by the swapper (in WAD).
     * @return amountOut Amount of token received by the swapper (in WAD).
     * @return deltaLiquidity Amount of liquidity generated by the swap fees.
     * @return params Additional parameters for the strategy.
     */
    function validateSwap(
        address sender,
        uint256 poolId,
        Pool calldata pool,
        bytes calldata data
    )
        external
        view
        returns (
            bool valid,
            int256 invariant,
            uint256 tokenInIndex,
            uint256 tokenOutIndex,
            uint256 amountIn,
            uint256 amountOut,
            uint256 deltaLiquidity,
            bytes calldata params
        );

    /**
     * @notice Validates a swap of tokens.
     * @param sender Address that called the DFMM contract.
     * @param poolId Id of the pool to swap tokens in.
     * @param pool Structure containing the pool.
     * @param data Additional data for the strategy.
     */
    function postSwapHook(
        address sender,
        uint256 poolId,
        Pool calldata pool,
        bytes calldata data
    ) external;

    /**
     * @notice Updates the pool parameters.
     * @dev Strategies are free to implement the control mechanism
     * they want.
     * @param sender Address that called the DFMM contract.
     * @param poolId Id of the pool to update.
     * @param pool Structure containing the pool.
     * @param data Additional data for the strategy.
     */
    function update(
        address sender,
        uint256 poolId,
        Pool calldata pool,
        bytes calldata data
    ) external;

    /**
     * @notice Computes the invariant of the pool.
     * @param reserves Reserves in the pool expressed in WAD.
     * @param totalLiquidity Liquidity in the pool.
     * @param params Pool parameters.
     */
    function tradingFunction(
        uint256[] memory reserves,
        uint256 totalLiquidity,
        bytes memory params
    ) external view returns (int256);

    /// @notice Address of the DFMM contract.
    function dfmm() external view returns (address);

    /**
     * @notice Returns the pool parameters.
     * @param poolId Id of the pool to get the parameters from.
     * @return params Pool parameters encoded as bytes.
     */
    function getPoolParams(uint256 poolId)
        external
        view
        returns (bytes calldata params);
}
